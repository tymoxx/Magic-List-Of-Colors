{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Modal","props","children","className","Card","colorProps","openModal","useState","hovered","setHovered","getRandomFromValues","arr","Math","floor","random","length","cardStyles","background","color","backgroundImage","cardStylesHovered","cursor","transform","boxShadow","transition","style","Object","assign","onClick","id","onMouseEnter","onMouseLeave","name","toUpperCase","year","App","error","setError","isLoading","setIsLoading","selectedCardId","setSelectedCardId","cards","setCards","modalRef","useRef","useEffect","document","addEventListener","handleMouseDown","removeEventListener","e","current","target","fetch","then","res","json","result","data","cardsJXS","map","key","text","fontSize","lineHeight","textTransform","textHeader","fontWeight","currentCard","find","card","modalJSX","ref","padding","border","errorJXS","display","flexWrap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.71e0344f.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport './Modal.css';\n\nconst url = 'https://reqres.in/api/unknown?per_page=12';\n\nconst Modal = (props) => {\n\n    const {children} = props;\n\n    return <div className='modal-content'>\n        {children}\n    </div>\n};\n\nconst Card = (props) => {\n\n    const {colorProps, openModal} = props;\n    const [hovered, setHovered] = useState(false);\n\n    const getRandomFromValues = (arr) => {\n        const index = Math.floor(Math.random() * arr.length);\n        return arr[index];\n    };\n\n    const cardStyles = {\n        background: `${colorProps.color}`,\n        backgroundImage: `linear-gradient(to bottom right, ${colorProps.color} 50%, white 160%)`\n    };\n\n    const cardStylesHovered = {\n        cursor: 'pointer',\n        transform: `rotate(${getRandomFromValues([-4, -3, -2, 2, 3, 4])}deg) scale(${getRandomFromValues([1.05, 1.1, 1.15])})`,\n        boxShadow: '3px 10px 15px -4px rgba(0,0,0,0.30)',\n        transition: `transform .2s`\n    };\n\n    return (\n        <div\n            className={'card'}\n            style={Object.assign({}, hovered ? cardStylesHovered : {}, cardStyles)}\n            onClick={() => openModal(colorProps.id)}\n            onMouseEnter={() => {\n                setHovered(true)\n            }}\n            onMouseLeave={() => {\n                setHovered(false)\n            }}\n        >\n            {colorProps.name.toUpperCase()}\n            <span className={'year'}>{colorProps.year}</span>\n        </div>\n    )\n};\n\nconst App = () => {\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [selectedCardId, setSelectedCardId] = useState(null);\n    const [cards, setCards] = useState([]);\n    const modalRef = useRef(null);\n\n    useEffect(() => {\n        document.addEventListener(\"mousedown\", handleMouseDown);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleMouseDown);\n        };\n    }, []);\n\n    const appStyles = {\n        display: 'flex',\n        flexWrap: 'wrap',\n    };\n\n    function openModal(id) {\n        setSelectedCardId(id);\n    }\n\n    function handleMouseDown(e) {\n        if (modalRef.current === (e.target)) {\n            setSelectedCardId(null);\n        }\n    }\n\n    useEffect(() => {\n        setIsLoading(true);\n        fetch(url)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoading(false);\n                    setCards(result.data);\n                },\n                (error) => {\n                    setIsLoading(false);\n                    setError(error);\n                }\n            )\n    }, []);\n\n    if (isLoading) {\n        return <h1>Loading...</h1>\n    }\n\n    const cardsJXS = cards.map((color) => {\n        return <Card\n            key={color.id}\n            colorProps={color}\n            openModal={openModal}\n        />\n    });\n\n    const fullCard = (color) => ({\n        padding: '20px 40px 40px 40px',\n        background: color,\n        border: 'none',\n});\n\n    const text = {\n        fontSize: '1.2em',\n        lineHeight: '2em',\n        color: 'white',\n        textTransform: 'uppercase',\n    };\n\n    const textHeader = {\n        fontWeight: 700,\n    };\n\n    const currentCard = cards.find((card) => (card.id === selectedCardId));\n\n    const modalJSX = selectedCardId &&\n        <div\n            className='modal'\n            ref={modalRef}\n        >\n            <Modal>\n                <div style={fullCard(currentCard.color)}>\n                    <h1 style={{color: 'white'}}>Info:</h1>\n                    <span style={{...text, ...textHeader}}>Color:  </span>\n                    <span style={text}>{currentCard.name}</span>\n                    <br/>\n                    <span style={{...text, ...textHeader}}>Year:  </span>\n                    <span style={text}>{currentCard.year}</span>\n                    <br/>\n                    <span style={{...text, ...textHeader}}>HEX:  </span>\n                    <span style={text}>{currentCard.color}</span>\n                </div>\n            </Modal>\n        </div>;\n\n    const errorJXS = error && <span>Sorry, an error happened why loading the data. Try again later</span>;\n\n    return (\n        <div style={appStyles}>\n            {errorJXS}\n            {cardsJXS}\n            {modalJSX}\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}